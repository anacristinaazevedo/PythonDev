from sqlalchemy import select
from sqlalchemy import func
from sqlalchemy import Column
from sqlalchemy import inspect
from sqlalchemy import create_engine
from sqlalchemy import ForeignKey
from sqlalchemy import Integer
from sqlalchemy import String
from sqlalchemy.orm import declarative_base
from sqlalchemy.orm import Session
from sqlalchemy.orm import relationship

Base = declarative_base()


class Client(Base):

    __tablename__ = "user_client"

# atributos
    id = Column(Integer, primary_key=True)
    name = Column(String)
    cpf = Column(String(12), nullable=False)
    endereco = Column(String, nullable=False)

    account = relationship("account", back_populates="client")

    def __repr__(self):
        return f"User(id={self.id}, name={self.name}, cpf={self.cpf}, endereco={self.endereco})"


class Account(Base):

    __tablename__ = "account"

# atributos
    id = Column(Integer, primary_key=True)
    tipo = Column(String(5), nullable=False)
    agencia = Column(String(5), nullable=False)
    conta = Column(Integer, nullable=False)

    user_id = Column(Integer, ForeignKey("user_client.id"), nullable=False)

    client = relationship("client", back_populates="account")

    def __repr__(self):
        return f"Account(id={self.id}, tipo={self.tipo}, agencia={self.agencia}, conta={self.conta})"

    print(Client.__tablename__)

# conexão com o banco de dados


engine = create_engine("sqlite://")


# criando as bases como tabelas no banco de dados
Base.metadata.create_all(engine)

# investiga o esquema do banco de dados
inspetor_engine = inspect(engine)
print(inspetor_engine.has_table("user_client"))

print(inspetor_engine.get_table_names())
print(inspetor_engine.default_schema_name)

with Session(engine) as session:
    ana = Client(
        name="ana",
        cpf="123.456.789-00",
        endereco=[Account(email_address="anazevedo@email.com")],
        tipo="Corrente",
        agencia="01",
        conta="010"
    )

    laura = Client(
        name="laura",
        cpf="147.258.369-01",
        endereco=[Account(email_address="laura@email.com")],
        tipo="Poupança",
        agencia="01",
        conta="120"
    )

    gaby = Client(
        name="gaby",
        cpf="369.258.147-79",
        endereco=[Account(email_address="gaby@email.com")],
        tipo="Corrente",
        agencia="01",
        conta="025"
    )

# enviando para o BD (persistência de dados)
    session.add_all([ana, laura, gaby])

    session.commit()


stmt_account = select(Account).where(Account.user_id.in_([2]))
print("\nRecuperando os endereços de email de Gaby")
for account in session.scalars(stmt_account):
    print(account)

# importando informação completa
stmt_join = select(Client.cpf, Account.conta).join_from(Account, Client)
for result in session.scalars(stmt_join):
    print(result)

connection = engine.connect()
results = connection.execute(stmt_join).fetchall()
print("\nExecutanto statement a partir da connection")
for result in results:
    print(result)

stmt_count = select(func.count("*")).select_from(Client)
print("\nTotal de instâncias em Client")
for result in session.scalars(stmt_count):
    print(result)
